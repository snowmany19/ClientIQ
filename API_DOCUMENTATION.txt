# CivicLogHOA - HOA Violation Management Platform API Documentation

## Overview
The CivicLogHOA API is a RESTful service built with FastAPI that provides comprehensive HOA violation management capabilities. The API supports user authentication, role-based access control, violation reporting, AI-powered analysis, CSV export functionality, and Stripe billing integration.

## Table of Contents
1. [Authentication](#authentication)
2. [User Management](#user-management)
3. [Violation Management](#violation-management)
4. [Billing & Subscriptions](#billing--subscriptions)
5. [Error Handling](#error-handling)

## Base URL
```
http://localhost:8000/api
```

## Authentication
All API endpoints require authentication via JWT tokens.

### Login
**POST** `/api/auth/login`

Authenticate a user and receive a JWT token.

**Request Body:**
```json
{
    "username": "johndoe",
    "password": "test123"
}
```

**Response:**
```json
{
    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
    "token_type": "bearer",
    "user": {
        "id": 2,
        "username": "johndoe",
        "email": "john@civicloghoa.com",
        "role": "inspector",
        "subscription_status": "active",
        "plan_id": "pro",
        "hoa": {
            "id": 1,
            "hoa_number": "HOA #001",
            "name": "Downtown HOA",
            "location": "123 Main St, Downtown",
            "contact_email": "admin@downtownhoa.com"
        }
    }
}
```

### Get Current User
**GET** `/api/auth/me`

Get information about the currently authenticated user.

**Headers:**
```
Authorization: Bearer <token>
```

**Response:**
```json
{
    "id": 2,
    "username": "johndoe",
    "email": "john@civicloghoa.com",
    "role": "inspector",
    "subscription_status": "active",
    "plan_id": "pro",
    "hoa": {
        "id": 1,
        "hoa_number": "HOA #001",
        "name": "Downtown HOA",
        "location": "123 Main St, Downtown",
        "contact_email": "admin@downtownhoa.com"
    }
}
```

## User Management

### Create User
**POST** `/api/auth/register`

Create a new user account (admin only).

**Request Body:**
```json
{
    "username": "newuser",
    "email": "newuser@civicloghoa.com",
    "password": "securepassword123",
    "role": "inspector",
    "hoa_id": 1
}
```

**Response:**
```json
{
    "id": 6,
    "username": "newuser",
    "email": "newuser@civicloghoa.com",
    "role": "inspector",
    "hoa_id": 1
}
```

## Violation Management

### Create Violation
**POST** `/api/violations/`

Create a new violation report.

**Headers:**
```
Authorization: Bearer <token>
Content-Type: multipart/form-data
```

**Form Data:**
- `description` (string, required): Detailed violation description (10-2000 chars)
- `hoa` (string, required): HOA name in format "HOA #XXX"
- `address` (string, required): Property address/unit number (2-100 chars)
- `location` (string, required): Specific location within property (2-100 chars)
- `offender` (string, required): Resident description (2-100 chars)
- `gps_coordinates` (string, optional): GPS coordinates
- `violation_type` (string, optional): Type of violation
- `file` (file, optional): Violation image (PNG, JPG, JPEG, max 5MB)

**Response:**
```json
{
    "id": 1,
    "violation_number": 1,
    "timestamp": "2025-01-27T10:30:00",
    "description": "Detailed violation description",
    "summary": "AI-generated summary of the violation",
    "tags": "Landscaping,Trash",
    "repeat_offender_score": 2,
    "hoa_name": "HOA #001",
    "address": "123 Main St, Unit 5",
    "location": "Front yard",
    "offender": "John Smith",
    "gps_coordinates": "37.7749,-122.4194",
    "status": "open",
    "pdf_path": "/static/reports/violation_1_20250715103000.pdf",
    "image_url": "/static/images/abc123.png",
    "user_id": 2,
    "inspected_by": "johndoe"
}
```

### Get All Violations
**GET** `/api/violations/?skip=0&limit=50&hoa_id=1&tag=landscaping`

Retrieve violations with filtering and pagination.

**Query Parameters:**
- `skip` (int, optional): Number of records to skip (default: 0)
- `limit` (int, optional): Number of records to return (default: 50, max: 100)
- `hoa_id` (int, optional): Filter by HOA ID
- `tag` (string, optional): Filter by violation tag
- `resident_id` (int, optional): Filter by resident ID
- `status` (string, optional): Filter by status

**Access Control:**
- **Admin**: Can view all violations
- **HOA Board/Inspector**: Can only view violations from their assigned HOA

### Get Violation by ID
**GET** `/api/violations/{violation_id}`

Retrieve a specific violation by ID.

**Headers:**
```
Authorization: Bearer <token>
```

**Response:**
```json
{
    "id": 1,
    "violation_number": 1,
    "timestamp": "2025-01-27T10:30:00",
    "description": "Detailed violation description",
    "summary": "AI-generated summary",
    "tags": "Landscaping,Trash",
    "repeat_offender_score": 2,
    "hoa_name": "HOA #001",
    "address": "123 Main St, Unit 5",
    "location": "Front yard",
    "offender": "John Smith",
    "gps_coordinates": "37.7749,-122.4194",
    "status": "open",
    "pdf_path": "/static/reports/violation_1.pdf",
    "image_url": "/static/images/abc123.png",
    "user_id": 2,
    "inspected_by": "johndoe"
}
```

### Delete Violation
**DELETE** `/api/violations/{violation_id}`

Delete a violation (admin/HOA board only).

**Headers:**
```
Authorization: Bearer <token>
```

**Access Control:**
- **Admin**: Can delete any violation
- **HOA Board**: Can only delete violations from their assigned HOA
- **Inspector**: Cannot delete violations

### Get Accessible HOAs
**GET** `/api/violations/hoas/accessible`

Get list of HOAs the current user can access.

**Headers:**
```
Authorization: Bearer <token>
```

**Response:**
```json
[
    {
        "id": 1,
        "hoa_number": "HOA #001",
        "name": "Downtown HOA",
        "location": "123 Main St, Downtown",
        "contact_email": "admin@downtownhoa.com"
    }
]
```

### Get Pagination Info
**GET** `/api/violations/pagination-info`

Get pagination metadata for violations.

**Query Parameters:**
- `hoa_id` (int, optional): Filter by HOA ID
- `tag` (string, optional): Filter by violation tag
- `resident_id` (int, optional): Filter by resident ID
- `status` (string, optional): Filter by status

**Response:**
```json
{
    "total": 45,
    "pages": 1,
    "current_page": 0,
    "items_per_page": 50
}
```

### Download Violation PDF
**GET** `/api/violation/{violation_id}/pdf`

Download the PDF report for a specific violation.

**Headers:**
```
Authorization: Bearer <token>
```

**Response:**
- **Content-Type**: `application/pdf`
- **Content-Disposition**: `attachment; filename=violation_1.pdf`

### Export Violations CSV
**GET** `/api/violations/export-csv`

Export filtered violations and graph data as CSV file.

**Query Parameters:**
- `skip` (int, optional): Number of records to skip (default: 0)
- `limit` (int, optional): Number of records to return (default: 1000, max: 10000)
- `hoa_id` (int, optional): Filter by HOA ID
- `tag` (string, optional): Filter by violation tag
- `resident_id` (int, optional): Filter by resident ID
- `status` (string, optional): Filter by status
- `start_date` (string, optional): Start date in ISO format
- `end_date` (string, optional): End date in ISO format

**Access Control:**
- **Admin**: Can export all violations
- **HOA Board**: Can only export violations from their assigned HOA
- **Inspector**: Cannot export violations

**Response:**
- **Content-Type**: `text/csv`
- **Content-Disposition**: `attachment; filename=violations_export_YYYYMMDD_HHMMSS.csv`

**CSV Format:**
```csv
ID,Timestamp,Description,Summary,Tags,Repeat Score,HOA Name,Address,Location,Resident,GPS Coordinates,Status,PDF Path,Image URL,User ID,Inspected By
1,2025-01-27 10:30:00,Detailed violation description,AI-generated summary,Landscaping;Trash,2,HOA #001,123 Main St Unit 5,Front yard,John Smith,37.7749,-122.4194,open,/static/reports/violation_1.pdf,/static/images/abc123.png,2,johndoe

--- Violation Counts by Date ---
Date,Count
2025-01-27,5
2025-01-26,3

--- Violation Counts by Repeat Score ---
Repeat Score,Count
1,15
2,8
3,5
4,2
5,1
```

**Features:**
- Includes all violation data with applied filters
- Includes summary statistics
- Includes violation counts by date
- Includes violation counts by repeat offender score
- Proper CSV escaping and formatting

### Get Dashboard Data
**GET** `/api/violations/dashboard-data`

Fetch all dashboard data (violations, pagination info, and accessible HOAs) in a single optimized API call. This endpoint is designed to speed up dashboard loading by reducing the number of separate API requests.

**Query Parameters:**
- `skip` (int, optional): Number of records to skip (default: 0)
- `limit` (int, optional): Number of records to return (default: 50, max: 100)
- `hoa_id` (int, optional): Filter by HOA ID
- `tag` (string, optional): Filter by violation tag
- `resident_id` (int, optional): Filter by resident ID
- `status` (string, optional): Filter by status

**Response:**
```json
{
    "violations": [ ... ],           // List of violation objects (same as /violations/)
    "pagination": {
        "total": 123,                // Total number of violations
        "pages": 3,                  // Total number of pages
        "current_page": 0,           // Current page number
        "items_per_page": 50         // Items per page
    },
    "accessible_hoas": [ ... ]       // List of HOAs user can access
}
```

**Benefits:**
- This endpoint replaces the need to call `/violations/`, `/violations/pagination-info`, and `/violations/hoas/accessible` separately for the dashboard.

## Billing & Subscriptions

### Get Subscription Plans
**GET** `/api/billing/plans`

Get available subscription plans.

**Response:**
```json
{
    "plans": [
        {
            "id": "basic",
            "name": "Basic Plan",
            "price": 29.99,
            "currency": "usd",
            "interval": "month",
            "features": ["Up to 100 violations/month", "Basic reporting"],
            "limits": {"violations_per_month": 100, "users": 1}
        },
        {
            "id": "pro",
            "name": "Professional Plan",
            "price": 99.99,
            "currency": "usd",
            "interval": "month",
            "features": ["Up to 1000 violations/month", "Advanced analytics", "Up to 5 users"],
            "limits": {"violations_per_month": 1000, "users": 5}
        },
        {
            "id": "enterprise",
            "name": "Enterprise Plan",
            "price": 299.99,
            "currency": "usd",
            "interval": "month",
            "features": ["Unlimited violations", "All features", "Unlimited users"],
            "limits": {"violations_per_month": -1, "users": -1}
        }
    ]
}
```

### Create Checkout Session
**POST** `/api/billing/create-checkout-session`

Create a Stripe checkout session for subscription.

**Request Body:**
```json
{
    "plan_id": "pro",
    "success_url": "http://localhost:8501/pages/billing_success",
    "cancel_url": "http://localhost:8501/pages/billing_cancel"
}
```

**Response:**
```json
{
    "checkout_url": "https://checkout.stripe.com/pay/cs_test_..."
}
```

### Get User Subscription
**GET** `/api/billing/subscription`

Get current user's subscription information.

**Response:**
```json
{
    "subscription_id": "sub_1234567890",
    "plan_id": "pro",
    "status": "active",
    "current_period_start": "2025-01-01T00:00:00Z",
    "current_period_end": "2025-02-01T00:00:00Z",
    "cancel_at_period_end": false,
    "features": ["violation_analytics", "pdf_reports", "image_uploads"],
    "limits": {"violations_per_month": 1000, "users": 5}
}
```

### Cancel Subscription
**POST** `/api/billing/cancel-subscription`

Cancel the current user's subscription.

**Response:**
```json
{
    "message": "Subscription will be canceled at the end of the current billing period",
    "cancel_at_period_end": true
}
```

### Stripe Webhook
**POST** `/api/billing/webhook`

Handle Stripe webhook events (subscription updates, payment failures, etc.).

**Headers:**
```
Stripe-Signature: t=1234567890,v1=abc123...
```

## Error Handling

### Error Response Format
All API errors follow this format:

```json
{
    "detail": "Error message",
    "type": "validation_error",
    "errors": [
        {
            "field": "description",
            "message": "Description is required"
        }
    ]
}
```

### Common HTTP Status Codes
- `200` - Success
- `201` - Created
- `400` - Bad Request (validation errors)
- `401` - Unauthorized (invalid/missing token)
- `403` - Forbidden (insufficient permissions)
- `404` - Not Found
- `422` - Validation Error
- `500` - Internal Server Error

### Rate Limiting
- Rate limit: 100 requests per hour per IP
- Headers included in response:
  - `X-RateLimit-Limit`: Request limit
  - `X-RateLimit-Remaining`: Remaining requests
  - `X-RateLimit-Reset`: Reset time (Unix timestamp)

## Development Notes

### Environment Variables
Required environment variables:
- `DATABASE_URL`: PostgreSQL connection string
- `SECRET_KEY`: JWT secret key (32+ characters)
- `OPENAI_API_KEY`: OpenAI API key for AI features
- `STRIPE_SECRET_KEY`: Stripe secret key for billing
- `STRIPE_WEBHOOK_SECRET`: Stripe webhook secret

### Local Development
1. Set up PostgreSQL database
2. Install dependencies: `pip install -r requirements.txt`
3. Run migrations: `alembic upgrade head`
4. Initialize database: `python init_db.py`
5. Start server: `uvicorn main:app --reload`

### Testing
Run tests with: `python run_tests.py`

### API Documentation
Interactive API documentation available at:
- Swagger UI: `http://localhost:8000/docs`
- ReDoc: `http://localhost:8000/redoc` 