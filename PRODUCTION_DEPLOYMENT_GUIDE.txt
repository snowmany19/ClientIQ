CivicLogHOA - HOA Violation Management Platform
PRODUCTION DEPLOYMENT GUIDE

This guide provides comprehensive instructions for deploying CivicLogHOA to production environments.

## 🚀 Overview

CivicLogHOA is a production-ready SaaS platform for HOA violation management with the following components:
- FastAPI backend with PostgreSQL database
- Streamlit frontend dashboard
- Stripe billing integration
- OpenAI GPT-4 for violation analysis and summarization
- Role-based access control (Admin, HOA Board, Inspector)
- PDF generation and file uploads
- Email alert system
- CSV export functionality

## 📋 Prerequisites

### Required Services
- PostgreSQL 12+ database
- Redis (optional, for caching)
- SMTP server for email notifications
- File storage (local or cloud)

### API Keys Required
- Stripe API keys (publishable and secret)
- OpenAI API key
- SMTP credentials

### Infrastructure
- Linux server (Ubuntu 20.04+ recommended)
- Docker and Docker Compose (optional)
- Nginx or Apache for reverse proxy
- SSL certificate for HTTPS

## 🏗️ Architecture

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Frontend      │    │    Backend      │    │   Database      │
│   (Streamlit)   │◄──►│   (FastAPI)     │◄──►│  (PostgreSQL)   │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Nginx         │    │   File Storage  │    │   Redis         │
│   (Reverse      │    │   (Images/PDFs) │    │   (Optional)    │
│    Proxy)       │    │                 │    │                 │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

## 🔧 Installation Steps

### 1. Server Setup

```bash
# Update system
sudo apt update && sudo apt upgrade -y

# Install required packages
sudo apt install -y python3 python3-pip python3-venv postgresql postgresql-contrib nginx git

# Install Docker (optional)
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker $USER
```

### 2. Database Setup

```bash
# Create database and user
sudo -u postgres psql
CREATE DATABASE civicloghoa_db;
CREATE USER civicloghoa_user WITH PASSWORD 'your_secure_password';
GRANT ALL PRIVILEGES ON DATABASE civicloghoa_db TO civicloghoa_user;
\q

# Configure PostgreSQL for production
sudo nano /etc/postgresql/*/main/postgresql.conf
# Set: max_connections = 100
# Set: shared_buffers = 256MB
# Set: effective_cache_size = 1GB

sudo systemctl restart postgresql
```

### 3. Backend Deployment

```bash
# Clone repository
git clone <your-repo-url>
cd CivicLogHOA/backend

# Create virtual environment
python3 -m venv venv
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt

# Create environment file
cp env_example.txt .env
nano .env
```

### 4. Environment Configuration

```bash
# .env file configuration
ENVIRONMENT=production
DEBUG=false
SECRET_KEY=your_very_secure_secret_key_here
DATABASE_URL=postgresql://civicloghoa_user:your_password@localhost:5432/civicloghoa_db

# Stripe configuration
STRIPE_SECRET_KEY=sk_live_...
STRIPE_PUBLISHABLE_KEY=pk_live_...
STRIPE_WEBHOOK_SECRET=whsec_...

# OpenAI configuration
OPENAI_API_KEY=sk-...

# Email configuration
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your_email@gmail.com
SMTP_PASSWORD=your_app_password
SMTP_USE_TLS=true

# File storage
UPLOAD_DIR=static/images
REPORTS_DIR=static/reports

# Security
CORS_ORIGINS=["https://yourdomain.com"]
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=3600
```

### 5. Database Migration

```bash
# Run migrations
alembic upgrade head

# Initialize with sample data (optional)
python init_db.py
```

### 6. Frontend Deployment

```bash
cd ../frontend

# Install dependencies
pip install -r requirements.txt

# Configure frontend
# Update API_URL in utils/api.py to point to your backend
```

### 7. Process Management

Create systemd service files for both backend and frontend:

```bash
# Backend service
sudo nano /etc/systemd/system/civicloghoa-backend.service
```

```ini
[Unit]
Description=CivicLogHOA Backend
After=network.target

[Service]
Type=exec
User=civicloghoa
WorkingDirectory=/opt/civicloghoa/backend
Environment=PATH=/opt/civicloghoa/backend/venv/bin
ExecStart=/opt/civicloghoa/backend/venv/bin/uvicorn main:app --host 0.0.0.0 --port 8000
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
```

```bash
# Frontend service
sudo nano /etc/systemd/system/civicloghoa-frontend.service
```

```ini
[Unit]
Description=CivicLogHOA Frontend
After=network.target

[Service]
Type=exec
User=civicloghoa
WorkingDirectory=/opt/civicloghoa/frontend
Environment=PATH=/opt/civicloghoa/frontend/venv/bin
ExecStart=/opt/civicloghoa/frontend/venv/bin/streamlit run dashboard.py --server.port 8501 --server.address 0.0.0.0
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
```

### 8. Nginx Configuration

```bash
sudo nano /etc/nginx/sites-available/civicloghoa
```

```nginx
server {
    listen 80;
    server_name yourdomain.com;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name yourdomain.com;

    ssl_certificate /path/to/your/certificate.crt;
    ssl_certificate_key /path/to/your/private.key;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Frontend
    location / {
        proxy_pass http://localhost:8501;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Backend API
    location /api/ {
        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Static files
    location /static/ {
        alias /opt/civicloghoa/backend/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
```

### 9. SSL Certificate

```bash
# Install Certbot
sudo apt install certbot python3-certbot-nginx

# Obtain SSL certificate
sudo certbot --nginx -d yourdomain.com

# Auto-renewal
sudo crontab -e
# Add: 0 12 * * * /usr/bin/certbot renew --quiet
```

### 10. Start Services

```bash
# Enable and start services
sudo systemctl enable civicloghoa-backend
sudo systemctl enable civicloghoa-frontend
sudo systemctl start civicloghoa-backend
sudo systemctl start civicloghoa-frontend

# Enable and start Nginx
sudo systemctl enable nginx
sudo systemctl start nginx
```

## 🔒 Security Considerations

### 1. Firewall Configuration

```bash
# Configure UFW firewall
sudo ufw allow ssh
sudo ufw allow 80
sudo ufw allow 443
sudo ufw enable
```

### 2. Database Security

```bash
# Configure PostgreSQL for production
sudo nano /etc/postgresql/*/main/pg_hba.conf
# Restrict connections to localhost only
```

### 3. File Permissions

```bash
# Set proper file permissions
sudo chown -R civicloghoa:civicloghoa /opt/civicloghoa
sudo chmod -R 755 /opt/civicloghoa
sudo chmod 600 /opt/civicloghoa/backend/.env
```

### 4. Regular Updates

```bash
# Set up automatic security updates
sudo apt install unattended-upgrades
sudo dpkg-reconfigure -plow unattended-upgrades
```

## 📊 Monitoring and Logging

### 1. Log Management

```bash
# Configure log rotation
sudo nano /etc/logrotate.d/civicloghoa
```

```
/opt/civicloghoa/backend/logs/*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 644 civicloghoa civicloghoa
}
```

### 2. Health Checks

Create health check endpoints and monitoring scripts:

```bash
# Health check script
nano /opt/civicloghoa/health_check.sh
```

```bash
#!/bin/bash
# Check backend health
curl -f http://localhost:8000/ || exit 1

# Check frontend health
curl -f http://localhost:8501/ || exit 1

# Check database connection
psql $DATABASE_URL -c "SELECT 1;" || exit 1
```

## 🔄 Backup Strategy

### 1. Database Backups

```bash
# Create backup script
nano /opt/civicloghoa/backup_db.sh
```

```bash
#!/bin/bash
BACKUP_DIR="/opt/backups/civicloghoa"
DATE=$(date +%Y%m%d_%H%M%S)
pg_dump $DATABASE_URL > $BACKUP_DIR/db_backup_$DATE.sql
gzip $BACKUP_DIR/db_backup_$DATE.sql

# Keep only last 7 days
find $BACKUP_DIR -name "db_backup_*.sql.gz" -mtime +7 -delete
```

### 2. File Backups

```bash
# Backup uploaded files
rsync -av /opt/civicloghoa/backend/static/ /opt/backups/civicloghoa/files/
```

## 🚀 Scaling Considerations

### 1. Load Balancing

For high-traffic deployments, consider:
- Multiple backend instances behind a load balancer
- Database read replicas
- CDN for static file delivery
- Redis for session storage and caching

### 2. Database Optimization

```sql
-- Create indexes for better performance
CREATE INDEX idx_violations_timestamp ON violations(timestamp);
CREATE INDEX idx_violations_hoa_name ON violations(hoa_name);
CREATE INDEX idx_violations_status ON violations(status);
```

## 🆘 Troubleshooting

### Common Issues

1. **Service won't start**: Check logs with `journalctl -u civicloghoa-backend`
2. **Database connection errors**: Verify DATABASE_URL and PostgreSQL status
3. **Permission errors**: Check file ownership and permissions
4. **SSL issues**: Verify certificate paths and Nginx configuration

### Useful Commands

```bash
# Check service status
sudo systemctl status civicloghoa-backend
sudo systemctl status civicloghoa-frontend

# View logs
sudo journalctl -u civicloghoa-backend -f
sudo journalctl -u civicloghoa-frontend -f

# Restart services
sudo systemctl restart civicloghoa-backend
sudo systemctl restart civicloghoa-frontend

# Check disk space
df -h

# Check memory usage
free -h

# Check network connections
netstat -tulpn
```

## 📞 Support

For deployment assistance or technical support, contact:
- Email: sfshkhalsa@gmail.com
- Documentation: See README.txt and API_DOCUMENTATION.txt

---

© 2025 Security Flaw Solutions LLC. All rights reserved. 